import 'vk_api_exception.dart';

abstract class ExceptionMapper {
  static VKApiException mapErrorResponseToException(int code, String message) {
    final errorCode = code ?? 0;
    final errorMessage = message ?? '';

    switch (errorCode) {
      case 1:
        return VKApiUnknownException(errorMessage);
      case 2:
        return VKApiDisabledException(errorMessage);
      case 3:
        return VKApiMethodException(errorMessage);
      case 4:
        return VKApiSignatureException(errorMessage);
      case 260:
        return VKApiAccessGroupsException(errorMessage);
      case 5:
        return VKApiAuthException(errorMessage);
      case 6:
        return VKApiTooManyException(errorMessage);
      case 7:
        return VKApiPermissionException(errorMessage);
      case 8:
        return VKApiRequestException(errorMessage);
      case 9:
        return VKApiFloodException(errorMessage);
      case 10:
        return VKApiServerException(errorMessage);
      case 11:
        return VKApiEnabledInTestException(errorMessage);
      case 12:
        return VKApiCompileException(errorMessage);
      case 13:
        return VKApiRuntimeException(errorMessage);
      case 14:
        return VKApiCaptchaException(errorMessage);
      case 15:
        return VKApiAccessException(errorMessage);
      case 16:
        return VKApiAuthHttpsException(errorMessage);
      case 17:
        return VKApiAuthValidationException(errorMessage);
      case 18:
        return VKApiUserDeletedException(errorMessage);
      case 19:
        return VKApiBlockedException(errorMessage);
      case 20:
        return VKApiMethodPermissionException(errorMessage);
      case 21:
        return VKApiMethodAdsException(errorMessage);
      case 22:
        return VKApiUploadException(errorMessage);
      case 23:
        return VKApiMethodDisabledException(errorMessage);
      case 24:
        return VKApiNeedConfirmationException(errorMessage);
      case 25:
        return VKApiNeedTokenConfirmationException(errorMessage);
      case 27:
        return VKApiGroupAuthException(errorMessage);
      case 28:
        return VKApiAppAuthException(errorMessage);
      case 29:
        return VKApiRateLimitException(errorMessage);
      case 30:
        return VKApiPrivateProfileException(errorMessage);
      case 1310:
        return VKApiCommunitiesCatalogDisabledException(errorMessage);
      case 1311:
        return VKApiCommunitiesCategoriesDisabledException(errorMessage);
      case 800:
        return VKApiVideoAlreadyAddedException(errorMessage);
      case 801:
        return VKApiVideoCommentsClosedException(errorMessage);
      case 300:
        return VKApiAlbumFullException(errorMessage);
      case 302:
        return VKApiAlbumsLimitException(errorMessage);
      case 1600:
        return VKApiStoryExpiredException(errorMessage);
      case 1602:
        return VKApiStoryIncorrectReplyPrivacyException(errorMessage);
      case 1105:
        return VKApiAuthFloodErrorException(errorMessage);
      case 600:
        return VKApiAdsPermissionException(errorMessage);
      case 1112:
        return VKApiAuthDelayException(errorMessage);
      case 601:
        return VKApiWeightedFloodException(errorMessage);
      case 602:
        return VKApiAdsPartialSuccessException(errorMessage);
      case 603:
        return VKApiAdsSpecificException(errorMessage);
      case 100:
        return VKApiParamException(errorMessage);
      case 101:
        return VKApiParamApiIdException(errorMessage);
      case 103:
        return VKApiLimitsException(errorMessage);
      case 104:
        return VKApiNotFoundException(errorMessage);
      case 105:
        return VKApiSaveFileException(errorMessage);
      case 106:
        return VKApiActionFailedException(errorMessage);
      case 1900:
        return VKApiPrettyCardsCardNotFoundException(errorMessage);
      case 1901:
        return VKApiPrettyCardsTooManyCardsException(errorMessage);
      case 1902:
        return VKApiPrettyCardsCardIsConnectedToPostException(errorMessage);
      case 113:
        return VKApiParamUserIdException(errorMessage);
      case 114:
        return VKApiParamAlbumIdException(errorMessage);
      case 629:
        return VKApiAdsObjectDeletedException(errorMessage);
      case 118:
        return VKApiParamServerException(errorMessage);
      case 119:
        return VKApiParamTitleException(errorMessage);
      case 1400:
        return VKApiMarketRestoreTooLateException(errorMessage);
      case 1401:
        return VKApiMarketCommentsClosedException(errorMessage);
      case 121:
        return VKApiParamHashException(errorMessage);
      case 1402:
        return VKApiMarketAlbumNotFoundException(errorMessage);
      case 122:
        return VKApiParamPhotosException(errorMessage);
      case 1403:
        return VKApiMarketItemNotFoundException(errorMessage);
      case 1404:
        return VKApiMarketItemAlreadyAddedException(errorMessage);
      case 125:
        return VKApiParamGroupIdException(errorMessage);
      case 1405:
        return VKApiMarketTooManyItemsException(errorMessage);
      case 1150:
        return VKApiParamDocIdException(errorMessage);
      case 1406:
        return VKApiMarketTooManyItemsInAlbumException(errorMessage);
      case 1151:
        return VKApiParamDocDeleteAccessException(errorMessage);
      case 1407:
        return VKApiMarketTooManyAlbumsException(errorMessage);
      case 1152:
        return VKApiParamDocTitleException(errorMessage);
      case 1408:
        return VKApiMarketItemHasBadLinksException(errorMessage);
      case 1153:
        return VKApiParamDocAccessException(errorMessage);
      case 129:
        return VKApiParamPhotoException(errorMessage);
      case 900:
        return VKApiMessagesUserBlockedException(errorMessage);
      case 901:
        return VKApiMessagesDenySendException(errorMessage);
      case 902:
        return VKApiMessagesPrivacyException(errorMessage);
      case 1160:
        return VKApiPhotoChangedException(errorMessage);
      case 907:
        return VKApiMessagesTooOldPtsException(errorMessage);
      case 908:
        return VKApiMessagesTooNewPtsException(errorMessage);
      case 140:
        return VKApiParamPageIdException(errorMessage);
      case 909:
        return VKApiMessagesEditExpiredException(errorMessage);
      case 141:
        return VKApiAccessPageException(errorMessage);
      case 910:
        return VKApiMessagesTooBigException(errorMessage);
      case 911:
        return VKApiMessagesKeyboardInvalidException(errorMessage);
      case 912:
        return VKApiMessagesChatBotFeatureException(errorMessage);
      case 913:
        return VKApiMessagesTooLongForwardsException(errorMessage);
      case 914:
        return VKApiMessagesTooLongMessageException(errorMessage);
      case 1170:
        return VKApiTooManyListsException(errorMessage);
      case 146:
        return VKApiMobileNotActivatedException(errorMessage);
      case 147:
        return VKApiInsufficientFundsException(errorMessage);
      case 148:
        return VKApiAccessMenuException(errorMessage);
      case 917:
        return VKApiMessagesChatUserNoAccessException(errorMessage);
      case 150:
        return VKApiParamTimestampException(errorMessage);
      case 919:
        return VKApiMessagesCantSeeInviteLinkException(errorMessage);
      case 920:
        return VKApiMessagesEditKindDisallowedException(errorMessage);
      case 921:
        return VKApiMessagesCantFwdException(errorMessage);
      case 924:
        return VKApiMessagesCantDeleteForAllException(errorMessage);
      case 925:
        return VKApiMessagesChatNotAdminException(errorMessage);
      case 927:
        return VKApiMessagesChatNotExistException(errorMessage);
      case 931:
        return VKApiMessagesCantChangeInviteLinkException(errorMessage);
      case 932:
        return VKApiMessagesGroupPeerAccessException(errorMessage);
      case 935:
        return VKApiMessagesChatUserNotInChatException(errorMessage);
      case 936:
        return VKApiMessagesContactNotFoundException(errorMessage);
      case 171:
        return VKApiFriendsListIdException(errorMessage);
      case 939:
        return VKApiMessagesMessageRequestAlreadySentException(errorMessage);
      case 940:
        return VKApiMessagesTooManyPostsException(errorMessage);
      case 173:
        return VKApiFriendsListLimitException(errorMessage);
      case 174:
        return VKApiFriendsAddYourselfException(errorMessage);
      case 942:
        return VKApiMessagesCantPinOneTimeStoryException(errorMessage);
      case 175:
        return VKApiFriendsAddInEnemyException(errorMessage);
      case 176:
        return VKApiFriendsAddEnemyException(errorMessage);
      case 177:
        return VKApiFriendsAddNotFoundException(errorMessage);
      case 180:
        return VKApiParamNoteIdException(errorMessage);
      case 181:
        return VKApiAccessNoteException(errorMessage);
      case 182:
        return VKApiAccessNoteCommentException(errorMessage);
      case 183:
        return VKApiAccessCommentException(errorMessage);
      case 700:
        return VKApiGroupChangeCreatorException(errorMessage);
      case 701:
        return VKApiGroupNotInClubException(errorMessage);
      case 702:
        return VKApiGroupTooManyOfficersException(errorMessage);
      case 703:
        return VKApiGroupNeed2faException(errorMessage);
      case 704:
        return VKApiGroupHostNeed2faException(errorMessage);
      case 706:
        return VKApiGroupTooManyAddressesException(errorMessage);
      case 711:
        return VKApiGroupAppIsNotInstalledInCommunityException(errorMessage);
      case 200:
        return VKApiAccessAlbumException(errorMessage);
      case 201:
        return VKApiAccessAudioException(errorMessage);
      case 203:
        return VKApiAccessGroupException(errorMessage);
      case 204:
        return VKApiAccessVideoException(errorMessage);
      case 205:
        return VKApiAccessMarketException(errorMessage);
      case 2000:
        return VKApiCallbackApiServersLimitException(errorMessage);
      case 210:
        return VKApiWallAccessPostException(errorMessage);
      case 211:
        return VKApiWallAccessCommentException(errorMessage);
      case 212:
        return VKApiWallAccessRepliesException(errorMessage);
      case 213:
        return VKApiWallAccessAddReplyException(errorMessage);
      case 214:
        return VKApiWallAddPostException(errorMessage);
      case 219:
        return VKApiWallAdsPublishedException(errorMessage);
      case 220:
        return VKApiWallTooManyRecipientsException(errorMessage);
      case 221:
        return VKApiStatusNoAudioException(errorMessage);
      case 222:
        return VKApiWallLinksForbiddenException(errorMessage);
      case 223:
        return VKApiWallReplyOwnerFloodException(errorMessage);
      case 224:
        return VKApiWallAdsPostLimitReachedException(errorMessage);
      case 1251:
        return VKApiAppsAlreadyUnlockedException(errorMessage);
      case 1000:
        return VKApiParamPhoneException(errorMessage);
      case 1256:
        return VKApiAppsSubscriptionNotFoundException(errorMessage);
      case 1257:
        return VKApiAppsSubscriptionInvalidStatusException(errorMessage);
      case 1260:
        return VKApiInvalidAddressException(errorMessage);
      case 1004:
        return VKApiPhoneAlreadyUsedException(errorMessage);
      case 500:
        return VKApiVotesPermissionException(errorMessage);
      case 503:
        return VKApiVotesException(errorMessage);
      case 250:
        return VKApiPollsAccessException(errorMessage);
      case 251:
        return VKApiPollsPollIdException(errorMessage);
      case 252:
        return VKApiPollsAnswerIdException(errorMessage);
      case 253:
        return VKApiPollsAccessWithoutVoteException(errorMessage);
      default:
        return VKApiException(errorCode, errorMessage);
    }
  }
}
